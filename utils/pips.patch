diff --git a/pips/chunk.hpp b/pips/chunk.hpp
index 92cac89..6629267 100644
--- a/pips/chunk.hpp
+++ b/pips/chunk.hpp
@@ -18,6 +18,7 @@ enum OpCode {
   TRUE,
   FALSE,
   NEGATE,
+  UPLUS,
   ADD,
   SUBTRACT,
   MULTIPLY,
@@ -127,6 +128,8 @@ struct Chunk {
       return Instruction<OpCode::RETURN>("OP_RETURN", i);
     case OpCode::NEGATE:
       return Instruction<OpCode::NEGATE>("OP_NEGATE", i);
+    case OpCode::UPLUS:
+      return Instruction<OpCode::UPLUS>("OP_UPLUS", i);
     case OpCode::ADD:
       return Instruction<OpCode::ADD>("OP_ADD", i);
     case OpCode::MULTIPLY:
diff --git a/pips/compiler.hpp b/pips/compiler.hpp
index 27636e8..df70dda 100644
--- a/pips/compiler.hpp
+++ b/pips/compiler.hpp
@@ -125,7 +125,7 @@ struct Compiler {
                                                         nullptr,          // COMMA
                                                         nullptr,          // DOT
                                                         &Compiler::unary, // MINUS
-                                                        nullptr,          // PLUS
+                                                        &Compiler::unary, // PLUS
                                                         nullptr,          // SEMICOLON
                                                         nullptr,          // MOD
                                                         nullptr,          // SLASH
@@ -554,6 +554,9 @@ struct Compiler {
     case TokenType::MINUS:
       emitByte(OpCode::NEGATE);
       break;
+    case TokenType::PLUS:
+      emitByte(OpCode::UPLUS);
+      break;
     case TokenType::BANG:
       emitByte(OpCode::NOT);
       break;
diff --git a/pips/vm.hpp b/pips/vm.hpp
index 4534b9a..a2366f2 100644
--- a/pips/vm.hpp
+++ b/pips/vm.hpp
@@ -176,6 +176,14 @@ struct VM {
         push(NUMBER_VAL(-AS_NUMBER(pop())));
         break;
       }
+      case OpCode::UPLUS: {
+        if (!IS_NUMBER(peek(0))) {
+          runtimeError("Operand must be a number");
+          return InterpretResult::RUNTIME_ERROR;
+        }
+        push(NUMBER_VAL(AS_NUMBER(pop())));
+        break;
+      }
       case OpCode::EXP: {
         if (!IS_NUMBER(peek(0))) {
           runtimeError("Operand must be a number");
